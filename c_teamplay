#include <stdio.h>
#define MAX_GOODS_COUNT 100
#define MAX_CUSTOMER_COUNT 100

int goods_management(){
	
	int goods_choice;
	
	while (1){
		int choice;
		printf("1. 상품 추가\n");
        printf("2. 상품 수정\n");
        printf("3. 상품 삭제\n");
        printf("4. 상품 목록 출력\n");
        printf("0. 종료\n");
        printf("선택: ");
        scanf("%d", &choice);
        printf("\n");
       
		switch(choice){
            case 1:
                goods_add();
                break;
            case 2:
                goods_change();
                break;
            case 3:
                goods_delete();
                break;
            case 4:
                goods_print();
                break;
            case 0:
                printf("이전으로 돌아갑니다.\n");
                return 0;
		}
       
	}
}

typedef struct {
    int id;           // 상품 ID
    char name[100];   // 상품 이름
    int price;        // 상품 가격
    int quantity;     // 상품 수량
} Goods;

	Goods goods_list[100];   // 최대 100개의 상품 정보 저장 가능
	int goods_count = 0;     // 현재 저장된 상품 수
	
void goods_add() {
    FILE* fp = fopen("goods.txt", "a");
    if (fp == NULL) {
        printf("상품 정보 파일을 열지 못했습니다.\n");
        return;
    }

    Goods new_goods;

    printf("상품 ID를 입력하세요: ");
    scanf("%d", &new_goods.id);
    printf("상품 이름을 입력하세요: ");
    scanf("%s", new_goods.name);
    printf("상품 가격을 입력하세요: ");
    scanf("%d", &new_goods.price);
    printf("상품 수량을 입력하세요: ");
    scanf("%d", &new_goods.quantity);

    fprintf(fp, "%d %s %d %d\n", new_goods.id, new_goods.name, new_goods.price, new_goods.quantity);
    fclose(fp);

    printf("상품이 추가되었습니다.\n");
}

void goods_change() {
    int id, option, i;
    printf("상품 ID를 입력하세요: ");
    scanf("%d", &id);

    FILE* fp = fopen("goods.txt", "r");
    if (fp == NULL) {
        printf("상품 정보 파일을 열지 못했습니다.\n");
        return;
    }

    Goods goods_list[MAX_GOODS_COUNT];
    int goods_count = 0;

    while (fscanf(fp, "%d %s %d %d", &goods_list[goods_count].id, goods_list[goods_count].name, &goods_list[goods_count].price, &goods_list[goods_count].quantity) != EOF) {
        goods_count++;
    }

    fclose(fp);

    for (i = 0; i < goods_count; i++) {
        if (goods_list[i].id == id) {
            printf("수정할 항목을 선택하세요 (1. 이름, 2. 가격, 3. 수량): ");
            scanf("%d", &option);

            switch (option) {
                case 1:
                    printf("수정할 이름을 입력하세요: ");
                    scanf("%s", goods_list[i].name);
                    break;
                case 2:
                    printf("수정할 가격을 입력하세요: ");
                    scanf("%d", &goods_list[i].price);
                    break;
                case 3:
                    printf("수정할 수량을 입력하세요: ");
                    scanf("%d", &goods_list[i].quantity);
                    break;
                default:
                    printf("잘못된 입력입니다.\n");
                    return;
            }

            fp = fopen("goods.txt", "w");
            if (fp == NULL) {
                printf("상품 정보 파일을 열지 못했습니다.\n");
                return;
            }

            for (i = 0; i < goods_count; i++) {
                fprintf(fp, "%d %s %d %d\n", goods_list[i].id, goods_list[i].name, goods_list[i].price, goods_list[i].quantity);
            }

            fclose(fp);

            printf("상품 정보가 수정되었습니다.\n");
            return;
        }
    	printf("일치하는 상품 정보가 없습니다.\n");
	}


    printf("해당 ID의 상품이 없습니다.\n");
}

void goods_delete() {
    int id, i, j;
    printf("상품 ID를 입력하세요: ");
    scanf("%d", &id);

    FILE* fp = fopen("goods.txt", "r");
    if (fp == NULL) {
        printf("상품 정보 파일을 열지 못했습니다.\n");
        return;
    }

    Goods goods_list[MAX_GOODS_COUNT];
    int goods_count = 0;

    while (fscanf(fp, "%d %s %d %d", &goods_list[goods_count].id, goods_list[goods_count].name, &goods_list[goods_count].price, &goods_list[goods_count].quantity) != EOF) {
        goods_count++;
    }

    fclose(fp);

    for (i = 0; i < goods_count; i++) {
        if (goods_list[i].id == id) {
            for (j = i; j < goods_count - 1; j++) {
                goods_list[j] = goods_list[j + 1];
            }
            goods_count--;
            break;
        }
    }

    fp = fopen("goods.txt", "w");
    if (fp == NULL) {
        printf("상품 정보 파일을 열지 못했습니다.\n");
        return;
    }

    for (i = 0; i < goods_count; i++) {
        fprintf(fp, "%d %s %d %d\n", goods_list[i].id, goods_list[i].name, goods_list[i].price, goods_list[i].quantity);
    }

    fclose(fp);

    printf("상품이 삭제되었습니다.\n");
}


void goods_print() {
    FILE* fp = fopen("goods.txt", "r");
    if (fp == NULL) {
        printf("상품 정보 파일을 열지 못했습니다.\n");
        return;
    }

    printf("현재 등록된 상품 목록:\n");
    printf("--------------------------------------------------\n");

    Goods goods_list[MAX_GOODS_COUNT];
    int goods_count = 0;

    while (fscanf(fp, "%d %s %d %d", &goods_list[goods_count].id, goods_list[goods_count].name, &goods_list[goods_count].price, &goods_list[goods_count].quantity) != EOF) {
        //printf("%d\t%s\t%d\t%d\n", goods_list[goods_count].id, goods_list[goods_count].name, goods_list[goods_count].price, goods_list[goods_count].quantity);
        printf("상품 ID: %d\n", goods_list[goods_count].id);
		printf("상품 이름: %s\n", goods_list[goods_count].name);
		printf("상품 가격: %d\n", goods_list[goods_count].price);
		printf("상품 수량: %d\n", goods_list[goods_count].quantity);
    	printf("--------------------------------------------------\n");
		goods_count++;
    }

    fclose(fp);
}


int customer_management(){
	int customer_choice;
	
	while (1){
		int choice;
		printf("1. 고객 추가\n");
        printf("2. 고객 수정\n");
        printf("3. 고객 삭제\n");
        printf("4. 고객 목록 출력\n");
        printf("0. 종료\n");
        printf("선택: ");
        scanf("%d", &choice);
        printf("\n");
       
		switch(choice){
            case 1:
                customer_add();
                break;
            case 2:
                customer_change();
                break;
            case 3:
                customer_delete();
                break;
            case 4:
                customer_print();
                break;
            case 0:
                printf("이전으로 돌아갑니다.\n");
                return 0;
		}
       
	}
}


typedef struct {
	int id; // 고객 ID
	char name[100]; // 고객 이름
	int age;// 고객 전화번호 
} Customer;

	Customer customer_list[100]; // 최대 100명의 고객 정보 저장 가능
	int customer_count = 0; // 현재 저장된 고객 수

void customer_add() {
	FILE* fp = fopen("customer.txt", "a");
	if (fp == NULL) {
		printf("고객 정보 파일을 열지 못했습니다.\n");
		return;
}

	Customer new_customer;
	
	printf("고객 ID를 입력하세요: ");
	scanf("%d", &new_customer.id);
	printf("고객 이름을 입력하세요: ");
	scanf("%s", new_customer.name);
	printf("고객 나이를 입력하세요: ");
	scanf("%d", &new_customer.age);
	
	fprintf(fp, "%d %s %d\n", new_customer.id, new_customer.name, new_customer.age);
	fclose(fp);
	
	printf("고객이 추가되었습니다.\n");
}

void customer_change() {
    int id, option, i;
    printf("고객 ID를 입력하세요: ");
    scanf("%d", &id);

    FILE* fp = fopen("customer.txt", "r");
    if (fp == NULL) {
        printf("고객 정보 파일을 열지 못했습니다.\n");
        return;
    }

    Customer customer_list[MAX_CUSTOMER_COUNT];
    int customer_count = 0;

    while (fscanf(fp, "%d %s %d", &customer_list[customer_count].id, customer_list[customer_count].name, &customer_list[customer_count].age) != EOF) {
        customer_count++;
    }

    fclose(fp);

    for (i = 0; i < customer_count; i++) {
        if (customer_list[i].id == id) {
            printf("수정할 항목을 선택하세요 (1. 이름, 2. 나이): ");
            scanf("%d", &option); 

            switch (option) {
                case 1:
                    printf("수정할 이름을 입력하세요: ");
                    scanf("%s", customer_list[i].name);
                    break;
                case 2:
                    printf("수정할 나이를 입력하세요: ");
                    scanf("%s", &customer_list[i].age);
                    break;
                default:
                    printf("잘못된 입력입니다.\n");
                    return;
            }

            fp = fopen("customer.txt", "w");
            if (fp == NULL) {
                printf("고객 정보 파일을 열지 못했습니다.\n");
                return;
            }

            for (i = 0; i < customer_count; i++) {
                fprintf(fp, "%d %s %d\n", customer_list[i].id, customer_list[i].name, customer_list[i].age);
            }

            fclose(fp);

            printf("고객 정보가 수정되었습니다.\n");
            return;
        }
    }

    printf("일치하는 고객 정보가 없습니다.\n");
}

void customer_delete() {
    int id, i, j;
    printf("상품 ID를 입력하세요: ");
    scanf("%d", &id);

    FILE* fp = fopen("customer.txt", "r");
    if (fp == NULL) {
        printf("상품 정보 파일을 열지 못했습니다.\n");
        return;
    }

    Customer customer_list[MAX_GOODS_COUNT];
    int customer_count = 0;

    while (fscanf(fp, "%d %s %d", &customer_list[customer_count].id, customer_list[customer_count].name, &customer_list[customer_count].age) != EOF) {
        customer_count++;
    }

    fclose(fp);

    for (i = 0; i < customer_count; i++) {
        if (goods_list[i].id == id) {
            for (j = i; j < customer_count - 1; j++) {
                customer_list[j] = customer_list[j + 1];
            }
            customer_count--;
            break;
        }
    }

    fp = fopen("customer.txt", "w");
    if (fp == NULL) {
        printf("상품 정보 파일을 열지 못했습니다.\n");
        return;
    }

    for (i = 0; i < customer_count; i++) {
        fprintf(fp, "%d %s %d\n", customer_list[i].id, customer_list[i].name, customer_list[i].age);
    }

    fclose(fp);

    printf("상품이 삭제되었습니다.\n");
}

void customer_print() {
    FILE* fp = fopen("customer.txt", "r");
    if (fp == NULL) {
        printf("고객 정보 파일을 열지 못했습니다.\n");
        return;
    }

    printf("현재 등록된 고객 목록:\n");
    printf("--------------------------------------------------\n");

    Customer customer_list[MAX_GOODS_COUNT];
    int customer_count = 0;

    while (fscanf(fp, "%d %s %d", &customer_list[customer_count].id, customer_list[customer_count].name, &customer_list[customer_count].age) != EOF) {
        //printf("%d\t%s\t%d\t%d\n", goods_list[goods_count].id, goods_list[goods_count].name, goods_list[goods_count].price, goods_list[goods_count].quantity);
        printf("고객 ID: %d\n", customer_list[customer_count].id);
		printf("고객 이름: %s\n", customer_list[customer_count].name);
		printf("고객 전화번호: %d\n", customer_list[customer_count].age);
    	printf("--------------------------------------------------\n");
		customer_count++;
    }

    fclose(fp);
}

int order_management(){
		int order_choice;
	
	while (1){
		int choice;
		printf("1. 주문 추가\n");
        printf("2. 주문 수정\n");
        printf("3. 주문 삭제\n");
        printf("4. 주문 목록 출력\n");
        printf("5. 주문 상세 내역 출력\n");
        printf("0. 종료\n");
        printf("선택: ");
        scanf("%d", &choice);
        printf("\n");
       
		switch(choice){
            case 1:
                order_add();
                break;
            case 2:
                order_change();
                break;
            case 3:
                order_delete();
                break;
            case 4:
                order_print();
                break;
            case 5:
                order_print();
                break;
            case 0:
                printf("이전으로 돌아갑니다.\n");
                return 0;
		}
       
	}
}





void order_add() {
    // 주문 생성 구현
    printf("주문 생성 기능입니다.\n");
}

void order_change() {
    // 주문 수정 구현
    printf("주문 수정 기능입니다.\n");
}

void order_delete() {
    // 주문 삭제 구현
    printf("주문 삭제 기능입니다.\n");
}

void order_print() {
    // 주문 목록 출력 구현
    printf("주문 목록 출력 기능입니다.\n");
}

int main() {
    int choice;

    while (1) {
        printf("1. 상품 관리\n");
        printf("2. 고객 관리\n");
        printf("3. 주문 관리\n");
        printf("0. 종료\n");
        printf("선택: ");
        scanf("%d", &choice);
        printf("\n");

        switch (choice) {
            case 1:
                goods_management();
                break;
            case 2:
                customer_management();
                break;
            case 3:
                order_management();
                break;
            case 0:
                printf("프로그램을 종료합니다.\n");
                return 0;
            default:
                printf("잘못된 선택입니다.\n");
                break;
        }
    }
}
